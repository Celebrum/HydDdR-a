enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                   String                @id @default(uuid())
    name                 String?
    email                String?               @unique
    pictureUrl           String?               @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation      String?

    stripeCustomerId     String?

    status               UserStatus            @default(VERIFIED)

    // this is the role of the user for the application
    globalRole           String                @default('USER')
    password             String?               @password @omit
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt @default(now())

    organizationRoles    OrganizationRole[]

    pwaSubscriptions     PwaSubscription[]     @relation("user")

    quantumPrototypes    QuantumPrototype[]    @relation("user")
    aiActuators          AiActuator[]          @relation("user")
    connectomeStructures ConnectomeStructure[] @relation("user")
    pythonSnippets       PythonSnippet[]       @relation("user")
    cognitiveDatas       CognitiveData[]       @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model QuantumPrototype {

    id           String   @id @default(uuid())
    name         String
    description  String
    creationDate String

    userId       String
    user         User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model AiActuator {

    id        String   @id @default(uuid())
    name      String
    type      String
    status    String

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model ConnectomeStructure {

    id            String   @id @default(uuid())
    name          String
    structureData String
    creationDate  String

    userId        String
    user          User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model PythonSnippet {

    id           String   @id @default(uuid())
    title        String
    code         String
    creationDate String

    userId       String
    user         User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model CognitiveData {

    id        String   @id @default(uuid())
    dataType  String
    value     String
    timestamp String

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model SecurityProtocol {

    id                 String        @id @default(uuid())
    name               String
    description        String
    level              Float
    implementationDate String

    organizationId     String
    organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model FundingStatus {

    id             String        @id @default(uuid())
    amount         String
    status         String
    date           String

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Organization {
    id                String             @id @default(uuid())
    name              String
    pictureUrl        String?            @default('https://i.imgur.com/BgkFiid.jpeg')

    stripeCustomerId  String?

    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())
    roles             OrganizationRole[]

    securityProtocols SecurityProtocol[] @relation("organization")
    fundingStatuss    FundingStatus[]    @relation("organization")

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}

model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String       @default(auth().id)
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

model PwaSubscription {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    userId    String   @default(auth().id)
    user      User     @relation(fields: [userId], references: [id], name: 'user')

    @@allow("all", true)
}

