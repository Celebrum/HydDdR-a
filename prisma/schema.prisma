//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                   String                @id() @default(uuid())
  name                 String?
  email                String?               @unique()
  pictureUrl           String?               @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation      String?
  stripeCustomerId     String?
  status               UserStatus            @default(VERIFIED)
  globalRole           String                @default("USER")
  /// @password
  /// @omit
  password             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt()
  organizationRoles    OrganizationRole[]
  pwaSubscriptions     PwaSubscription[]     @relation("user")
  quantumPrototypes    QuantumPrototype[]    @relation("user")
  aiActuators          AiActuator[]          @relation("user")
  connectomeStructures ConnectomeStructure[] @relation("user")
  pythonSnippets       PythonSnippet[]       @relation("user")
  cognitiveDatas       CognitiveData[]       @relation("user")
}

/// @@allow('all', true)
model QuantumPrototype {
  id           String   @id() @default(uuid())
  name         String
  description  String
  creationDate String
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model AiActuator {
  id        String   @id() @default(uuid())
  name      String
  type      String
  status    String
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ConnectomeStructure {
  id            String   @id() @default(uuid())
  name          String
  structureData String
  creationDate  String
  userId        String
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PythonSnippet {
  id           String   @id() @default(uuid())
  title        String
  code         String
  creationDate String
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CognitiveData {
  id        String   @id() @default(uuid())
  dataType  String
  value     String
  timestamp String
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SecurityProtocol {
  id                 String        @id() @default(uuid())
  name               String
  description        String
  level              Float
  implementationDate String
  organizationId     String
  organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model FundingStatus {
  id             String        @id() @default(uuid())
  amount         String
  status         String
  date           String
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id                String             @id() @default(uuid())
  name              String
  pictureUrl        String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId  String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  roles             OrganizationRole[]
  securityProtocols SecurityProtocol[] @relation("organization")
  fundingStatuss    FundingStatus[]    @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
